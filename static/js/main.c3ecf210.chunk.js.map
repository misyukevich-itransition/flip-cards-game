{"version":3,"sources":["enums/RoutePath.ts","components/background/Background.tsx","components/primary-layout/PrimaryLayout.tsx","hooks/useClassName/useClassName.ts","components/button/enum/ContentButtonSize.ts","components/button/Button.tsx","store/types/user.ts","components/input/Input.tsx","hooks/useTypedSelector.ts","store/actionCreators/userActions.ts","store/types/game.ts","store/actionCreators/gameActions.ts","hooks/useAction.ts","pages/home/Home.tsx","components/card/Card.tsx","components/gameCards/GameCards.tsx","components/frame/Frame.tsx","pages/game/Game.tsx","pages/score/Score.tsx","App.tsx","reportWebVitals.ts","store/reducers/userReducer.ts","store/reducers/gameReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["RoutePath","Background","className","PrimaryLayout","children","useClassName","component","additionalComponent","useCallback","elementOrModifiers","optionalModifiers","element","modifiers","block","classNames","modifiersDictionary","mapKeys","value","modifier","Size","UserActionTypes","Button","name","size","Lg","onButtonClick","cn","small","Sm","onClick","Input","userName","onInputChange","type","placeholder","autoComplete","required","onChange","htmlFor","useTypedSelector","useSelector","GameActionTypes","initUser","INIT_USER","payload","results","restart","isRestart","RESTART","useActions","dispatch","useDispatch","bindActionCreators","actionCreators","Home","user","useState","username","setUsername","history","useHistory","onSubmit","push","Game","event","currentTarget","Card","GameCards","map","image","i","Frame","header","content","game","useEffect","setTimeout","Score","console","log","App","basename","process","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","state","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3ecf210.chunk.js","sourcesContent":["export enum RoutePath {\n  Home = '/',\n  Game = '/game',\n  Score = '/score',\n}\n","import './Background.scss';\n\nconst Background = () => {\n  return (\n    <div className=\"wave-wrapper animation\">\n      <div className=\"wave-wrapper--inner bgTop\">\n        <div className=\"wave wave--top\" />\n      </div>\n\n      <div className=\"wave-wrapper--inner bgMiddle\">\n        <div className=\"wave wave--middle\" />\n      </div>\n\n      <div className=\"wave-wrapper--inner bgBottom\">\n        <div className=\"wave wave--bottom\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Background;\n","import React from 'react';\nimport './PrimaryLayout.scss';\nimport Background from '../background/Background';\n\nconst PrimaryLayout: React.FC = ({ children }) => {\n  return (\n    <div className=\"Layout\">\n      {children}\n      <Background />\n    </div>\n  );\n};\n\nexport default PrimaryLayout;\n","import classNames from 'classnames';\nimport mapKeys from 'lodash/mapKeys';\nimport { useCallback } from 'react';\nimport { Optional } from '../../types/Optional';\nimport { ClassNameFn } from './interfaces/ClassNameFn';\nimport { ClassDictionary } from '../../types/ClassDictionary';\n\nexport function useClassName(\n  component: string,\n  additionalComponent?: string,\n): ClassNameFn {\n  return useCallback<ClassNameFn>(\n    (\n      elementOrModifiers?: string | ClassDictionary,\n      optionalModifiers?: ClassDictionary,\n    ) => {\n      const block = classNames(component);\n      let element: Optional<string>;\n      let modifiers;\n\n      let modifiersDictionary: ClassDictionary | null = null;\n\n      if (typeof elementOrModifiers === 'string') {\n        element = `${component}__${elementOrModifiers}`;\n      }\n\n      if (typeof elementOrModifiers === 'object') {\n        modifiersDictionary = elementOrModifiers;\n      } else if (typeof optionalModifiers === 'object') {\n        modifiersDictionary = optionalModifiers;\n      }\n\n      if (modifiersDictionary) {\n        modifiers = mapKeys(\n          modifiersDictionary,\n          (value, modifier) => `${element || block}--${modifier}`,\n        );\n      }\n\n      return element\n        ? classNames(element, modifiers)\n        : classNames(block, modifiers, additionalComponent);\n    },\n    [component, additionalComponent],\n  );\n}\n","export enum Size {\n  Sm = 'sm',\n  Md = 'md',\n  Lg = 'lg',\n}\n\nexport type ContentButtonSize = Size.Lg | Size.Sm;\n","import React from 'react';\nimport { useClassName } from '../../hooks/useClassName/useClassName';\nimport './Button.scss';\nimport { ContentButtonSize, Size } from './enum/ContentButtonSize';\n\ninterface IButtonProps {\n  name: string;\n  onButtonClick?: () => void;\n  size?: ContentButtonSize;\n}\n\nconst Button: React.FC<IButtonProps> = ({\n    name,\n    size = Size.Lg,\n    onButtonClick\n}) => {\n  const cn = useClassName('Button');\n\n  return (\n    <button className={cn({ small: size === Size.Sm })} onClick={onButtonClick}>\n      {name}\n    </button>\n  );\n};\n\nexport default Button;\n","import { InitUserAction } from '../interfaces/user';\n\nexport enum UserActionTypes {\n  INIT_USER = 'INIT_USER',\n}\n\nexport type UserAction = InitUserAction;\n","import './Input.scss';\nimport React, { ChangeEvent } from 'react';\nimport { useClassName } from '../../hooks/useClassName/useClassName';\n\ninterface IInputProps {\n  userName: string;\n  onInputChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Input: React.FC<IInputProps> = ({ userName, onInputChange }) => {\n  const cn = useClassName('Form');\n\n  return (\n    <div className={cn()}>\n      <input\n        type=\"input\"\n        className={cn('field')}\n        placeholder=\"Name\"\n        autoComplete=\"off\"\n        required\n        value={userName}\n        onChange={onInputChange}\n      />\n\n      <label htmlFor=\"name\" className={cn('label')}>\n        Name\n      </label>\n    </div>\n  );\n};\n\nexport default Input;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { UserActionTypes } from '../types/user';\nimport { InitUserAction } from '../interfaces/user';\n\nexport const initUser = (name: string): InitUserAction => {\n  return {\n    type: UserActionTypes.INIT_USER,\n    payload: {\n      name,\n      results: [],\n    },\n  };\n};\n","export interface GameState {\n  isRestart: boolean;\n}\n\nexport enum GameActionTypes {\n  RESTART = 'RESTART',\n}\n\nexport interface RestartAction {\n  type: GameActionTypes.RESTART;\n  payload: boolean;\n}\n\nexport type GameAction =\n  | RestartAction;\n","import { GameActionTypes, RestartAction } from '../types/game';\n\nexport const restart = (isRestart: boolean): RestartAction => ({\n  type: GameActionTypes.RESTART,\n  payload: isRestart,\n});\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actionCreators from '../store/actionCreators';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(actionCreators, dispatch);\n};\n","import './Home.scss';\nimport { useHistory } from 'react-router-dom';\nimport { ChangeEventHandler, useState } from 'react';\nimport PrimaryLayout from '../../components/primary-layout/PrimaryLayout';\nimport Button from '../../components/button/Button';\nimport Input from '../../components/input/Input';\nimport { RoutePath } from '../../enums/RoutePath';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { useActions } from '../../hooks/useAction';\n\nconst Home = () => {\n  const { name } = useTypedSelector(({ user }) => user);\n\n  const [username, setUsername] = useState(name);\n\n  const { initUser } = useActions();\n\n  const history = useHistory();\n\n  const onChangeUserName: ChangeEventHandler<HTMLInputElement> = (event) => {\n    setUsername(event.currentTarget.value);\n  };\n\n  const onStartGame = () => {\n    if (!username) {\n      return;\n    }\n\n    if (name !== username) {\n      initUser(username);\n    }\n\n    history.push(RoutePath.Game);\n  };\n\n  return (\n    <PrimaryLayout>\n      <form className=\"Home\" onSubmit={onStartGame}>\n        <Input onInputChange={onChangeUserName} userName={username} />\n        <Button name=\"Start game\" />\n      </form>\n    </PrimaryLayout>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { useClassName } from '../../hooks/useClassName/useClassName';\nimport './Card.scss';\n\ninterface ICardProps {\n  name: string;\n}\n\nconst Card: React.FC<ICardProps> = ({\n    name,\n}) => {\n  const cn = useClassName('Card');\n\n  return (\n    <div className={cn()}>{name}</div>\n  )\n}\n\nexport default Card;\n","import { useClassName } from '../../hooks/useClassName/useClassName';\nimport Card from '../card/Card';\nimport './GameCards.scss';\n\nconst GameCards = () => {\n  const cn = useClassName('GameCards');\n  const images = [\n    'Jake', 'Jon', 'Thruster', 'Jon', 'Jake', 'Jon',\n    'Thruster', 'Jake', 'Jon', 'Thruster', 'Jake', 'Jon',\n    'Thruster', 'Jake', 'Jon', 'Thruster', 'Thruster', 'Jake',\n    'Jake', 'Jon', 'Thruster', 'Jon', 'Jake', 'Jon'\n  ];\n\n  return (\n    <div className={cn()}>\n      { images.map((image, i) => <Card name={image} key={i} />) }\n    </div>\n  )\n}\n\nexport default GameCards;\n","import React from 'react';\nimport { useClassName } from '../../hooks/useClassName/useClassName';\nimport './Frame.scss';\n\ninterface ICardProps {\n  header: string;\n  content: number;\n}\n\nconst Frame: React.FC<ICardProps> = ({\n  header,\n  content,\n}) => {\n  const cn = useClassName('Frame');\n\n  return (\n    <div className={cn()}>\n      <div>{header}</div>\n      <div>{content}</div>\n    </div>\n  )\n}\n\nexport default Frame;\n","import { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Button from '../../components/button/Button';\nimport PrimaryLayout from '../../components/primary-layout/PrimaryLayout';\nimport { RoutePath } from '../../enums/RoutePath';\nimport { Size } from '../../components/button/enum/ContentButtonSize';\nimport { useClassName } from '../../hooks/useClassName/useClassName';\nimport GameCards from '../../components/gameCards/GameCards';\nimport Frame from '../../components/frame/Frame';\nimport { useActions } from '../../hooks/useAction';\nimport './Game.scss';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\n\nconst Game = () => {\n  const cn = useClassName('Game');\n\n  const { isRestart } = useTypedSelector(({ game }) => game);\n  const { restart } = useActions();\n\n  const history = useHistory();\n\n  const onRestartGame = () => {\n    restart(true);\n  };\n\n  const onMenuClick = () => {\n    history.push(RoutePath.Home);\n  };\n\n  useEffect(() => {\n    if (isRestart) {\n      // resetCards();\n      // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n      setTimeout(() => restart(false), 1000);\n      // restart(false);\n    }\n  }, [isRestart]);\n\n  return (\n    <PrimaryLayout>\n      <div className={cn()}>\n        <div className={cn('info')}>\n          <Frame header=\"MATCHES\" content={2} />\n          <Frame header=\"TURNS\" content={2} />\n        </div>\n\n        <div className={cn('cards')}>\n          {\n            !isRestart ? <GameCards /> : <div>AAAAAaAAAAAAAAAA</div>\n          }\n        </div>\n\n        <div className={cn('controls')}>\n          <Button name=\"Menu\" size={Size.Sm} onButtonClick={onMenuClick} />\n          <Button name=\"Restart\" size={Size.Sm} onButtonClick={onRestartGame} />\n        </div>\n      </div>\n    </PrimaryLayout>\n  );\n};\n\nexport default Game;\n","import './Score.scss';\nimport PrimaryLayout from '../../components/primary-layout/PrimaryLayout';\nimport Button from '../../components/button/Button';\n\nconst Score = () => {\n  return (\n    <PrimaryLayout>\n      <div className=\"Score\">\n        <Button name=\"Score\" onButtonClick={() => console.log('SCORE')} />\n      </div>\n    </PrimaryLayout>\n  );\n};\n\nexport default Score;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { RoutePath } from './enums/RoutePath';\nimport Home from './pages/home/Home';\nimport Game from './pages/game/Game';\nimport Score from './pages/score/Score';\n\nfunction App() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path={RoutePath.Home} exact component={Home} />\n        <Route path={RoutePath.Game} component={Game} />\n        <Route path={RoutePath.Score} component={Score} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { UserAction, UserActionTypes } from '../types/user';\nimport { UserState } from '../interfaces/user';\n\nconst initialState: UserState = {\n  name: '',\n  results: [],\n};\n\nexport const userReducer = (\n  state = initialState,\n  action: UserAction,\n): UserState => {\n  switch (action.type) {\n    case UserActionTypes.INIT_USER:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { GameAction, GameActionTypes, GameState } from '../types/game';\n\nconst initialState: GameState = {\n  isRestart: false,\n};\n\nexport const gameReducer = (\n  state = initialState,\n  action: GameAction\n): GameState => {\n  switch (action.type) {\n    case GameActionTypes.RESTART:\n      return { ...state, isRestart: action.payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { userReducer } from './userReducer';\nimport { gameReducer } from './gameReducer';\n\nexport const rootReducer = combineReducers({\n  user: userReducer,\n  game: gameReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from 'redux';\nimport { rootReducer } from './reducers';\n\nexport const store = createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/index.scss';\nimport { store } from './store';\n\nconst renderApp = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrenderApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}