{"version":3,"sources":["enums/RoutePath.ts","store/types/user.ts","components/background/Background.tsx","components/primary-layout/PrimaryLayout.tsx","components/button/Button.tsx","components/input/Input.tsx","hooks/useTypedSelector.ts","store/actionCreators/userActions.ts","pages/home/Home.tsx","hooks/useAction.ts","pages/game/Game.tsx","pages/score/Score.tsx","App.tsx","reportWebVitals.ts","store/reducers/userReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["RoutePath","UserActionTypes","Background","className","PrimaryLayout","children","Button","name","onButtonClick","onClick","Input","userName","onInputChange","type","placeholder","autoComplete","required","value","onChange","htmlFor","useTypedSelector","useSelector","initUser","INIT_USER","payload","results","Home","user","useState","username","setUsername","dispatch","useDispatch","bindActionCreators","actionCreators","useActions","history","useHistory","onSubmit","push","Game","event","currentTarget","console","log","Score","App","basename","process","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","state","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb3660d9.chunk.js","sourcesContent":["export enum RoutePath {\n  Home = '/',\n  Game = '/game',\n  Score = '/score',\n}\n","import { InitUserAction } from '../interfaces/user';\n\nexport enum UserActionTypes {\n  INIT_USER = 'INIT_USER',\n}\n\nexport type UserAction = InitUserAction;\n","import './Background.scss';\n\nconst Background = () => {\n  return (\n    <div className=\"wave-wrapper animation\">\n      <div className=\"wave-wrapper--inner bgTop\">\n        <div className=\"wave wave--top\" />\n      </div>\n      <div className=\"wave-wrapper--inner bgMiddle\">\n        <div className=\"wave wave--middle\" />\n      </div>\n      <div className=\"wave-wrapper--inner bgBottom\">\n        <div className=\"wave wave--bottom\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Background;\n","import React from 'react';\nimport './PrimaryLayout.scss';\nimport Background from '../background/Background';\n\nconst PrimaryLayout: React.FC = ({ children }) => {\n  return (\n    <div className=\"Layout\">\n      {children}\n      <Background />\n    </div>\n  );\n};\n\nexport default PrimaryLayout;\n","import React from 'react';\nimport './Button.scss';\n\ninterface IButtonProps {\n  name: string;\n  onButtonClick?: () => void;\n}\n\nconst Button: React.FC<IButtonProps> = ({ name, onButtonClick }) => {\n  return (\n    <button className=\"Button\" onClick={onButtonClick}>\n      {name}\n    </button>\n  );\n};\n\nexport default Button;\n","import './Input.scss';\nimport React, { ChangeEvent } from 'react';\n\ninterface IInputProps {\n  userName: string;\n  onInputChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Input: React.FC<IInputProps> = ({ userName, onInputChange }) => {\n  return (\n    <div className=\"Form\">\n      <input\n        type=\"input\"\n        className=\"Form__field\"\n        placeholder=\"Name\"\n        autoComplete=\"off\"\n        required\n        value={userName}\n        onChange={onInputChange}\n      />\n      <label htmlFor=\"name\" className=\"Form__label\">\n        Name\n      </label>\n    </div>\n  );\n};\n\nexport default Input;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { UserActionTypes } from '../types/user';\nimport { InitUserAction } from '../interfaces/user';\n\nexport const initUser = (name: string): InitUserAction => {\n  return {\n    type: UserActionTypes.INIT_USER,\n    payload: {\n      name,\n      results: [],\n    },\n  };\n};\n","import './Home.scss';\nimport { useHistory } from 'react-router-dom';\nimport { ChangeEventHandler, useState } from 'react';\nimport PrimaryLayout from '../../components/primary-layout/PrimaryLayout';\nimport Button from '../../components/button/Button';\nimport Input from '../../components/input/Input';\nimport { RoutePath } from '../../enums/RoutePath';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { useActions } from '../../hooks/useAction';\n\nconst Home = () => {\n  const { name } = useTypedSelector(({ user }) => user);\n\n  const [username, setUsername] = useState(name);\n\n  const { initUser } = useActions();\n\n  const history = useHistory();\n\n  const onChangeUserName: ChangeEventHandler<HTMLInputElement> = (event) => {\n    setUsername(event.currentTarget.value);\n  };\n\n  const onStartGame = () => {\n    if (!username) {\n      return;\n    }\n\n    if (name !== username) {\n      initUser(username);\n    }\n\n    history.push(RoutePath.Game);\n  };\n\n  return (\n    <PrimaryLayout>\n      <form className=\"Home\" onSubmit={onStartGame}>\n        <Input onInputChange={onChangeUserName} userName={username} />\n        <Button name=\"Start game\" />\n      </form>\n    </PrimaryLayout>\n  );\n};\n\nexport default Home;\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actionCreators from '../store/actionCreators';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(actionCreators, dispatch);\n};\n","import { useHistory } from 'react-router-dom';\nimport Button from '../../components/button/Button';\nimport PrimaryLayout from '../../components/primary-layout/PrimaryLayout';\nimport { RoutePath } from '../../enums/RoutePath';\nimport './Game.scss';\n\nconst Game = () => {\n  const history = useHistory();\n\n  const onMenuClick = () => {\n    history.push(RoutePath.Home);\n  };\n\n  return (\n    <PrimaryLayout>\n      <div className=\"Game\">\n        <div className=\"Game__sidebar\">\n          <div>MATCHES</div>\n          <Button name=\"Menu\" onButtonClick={onMenuClick} />\n        </div>\n        <div className=\"Game__cards\">CARDS</div>\n        <div className=\"Game__sidebar\">\n          <div>TURNS</div>\n          <Button name=\"Restart\" onButtonClick={() => console.log('FLIP')} />\n        </div>\n      </div>\n    </PrimaryLayout>\n  );\n};\n\nexport default Game;\n","import './Score.scss';\nimport PrimaryLayout from '../../components/primary-layout/PrimaryLayout';\nimport Button from '../../components/button/Button';\n\nconst Score = () => {\n  return (\n    <PrimaryLayout>\n      <div className=\"Score\">\n        <Button name=\"Score\" onButtonClick={() => console.log('SCORE')} />\n      </div>\n    </PrimaryLayout>\n  );\n};\n\nexport default Score;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { RoutePath } from './enums/RoutePath';\nimport Home from './pages/home/Home';\nimport Game from './pages/game/Game';\nimport Score from './pages/score/Score';\n\nfunction App() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path={RoutePath.Home} exact component={Home} />\n        <Route path={RoutePath.Game} component={Game} />\n        <Route path={RoutePath.Score} component={Score} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { UserAction, UserActionTypes } from '../types/user';\nimport { UserState } from '../interfaces/user';\n\nconst initialState: UserState = {\n  name: '',\n  results: [],\n};\n\nexport const userReducer = (\n  state = initialState,\n  action: UserAction,\n): UserState => {\n  switch (action.type) {\n    case UserActionTypes.INIT_USER:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { userReducer } from './userReducer';\n\nexport const rootReducer = combineReducers({\n  user: userReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from 'redux';\nimport { rootReducer } from './reducers';\n\nexport const store = createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/index.scss';\nimport { store } from './store';\n\nconst renderApp = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrenderApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}